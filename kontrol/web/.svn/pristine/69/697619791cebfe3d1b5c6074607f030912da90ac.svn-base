<?php

if (!defined('BASEPATH'))
    exit('No direct script access allowed');

class Orders extends CI_Controller {

    var $sitio = 'SELL';

    function __construct() {
        parent::__construct();
        checkForSession();
        geoIP();
        date_default_timezone_set('America/Mexico_City');
    }

    /**
     * Index Page for this controller.
     *
     * Shows all stores of a particular user
     */
    public function index() {
        if ($this->session->userdata('admin_client_stores')) {
            redirect('/orders/store/22');
            return false;
        }

        $this->load->model('sell_model');
        $user_id = $this->session->userdata('user_id');

        $data['stores'] = $this->sell_model->get_all_user_stores();

        if ($data['stores']['stores']) {

            $store_id = $data['stores']['stores'][0]->id;
            redirect('/orders/store/' . $store_id);
        } else {

            $data['stores'] = false;
            $this->load->view('orders/index_view', $data);
        }
    }

    // This function checks delivered orders without a deposit process and generates a payment order 
    public function deposit_request() {

        if ($this->input->post('store_id') AND $this->input->post('orders_id')) {

            $store_id = $this->input->post('store_id');

            //PERMISSIONS
            foreach ($this->input->post('orders_id') as $value) {
                $uri_segment = array('order_id' => $value, 'store_id' => $store_id);
                checkForPermission($this->session->userdata('user_id'), $uri_segment, 'orders');
            }
            //END OF PERMISSIONS

            $this->load->model('sell_model');
            $CI = & get_instance();
            $CI->load->model('../../../../shared_resources/models/shared_model', 'shared_model', TRUE);

            $store_data = $CI->shared_model->get_info_store($store_id);

            if ($store_data->bank_account != '') {
                $orders = $this->input->post('orders_id');
                $data['confirmation'] = $this->sell_model->confirming_deposit($orders, $store_data->currency);
                $data['store'] = $store_id;
                $data['store_currency'] = $store_data->currency;
            } else {
                $data['flashMessage'] = 'You don&rsquo;t have a bank account registered, please go to your store settings and let us know where to deposit your money';
                $data['store'] = $store_id;
                $data['store_currency'] = $store_data->currency;
            }

            //print_r($data['confirmation']);
            $this->load->view('orders/deposit_request_view', $data);
        } else {

            redirect(base_url() . 'orders');
        }
    }

    public function generate_order() {

        $orders = $this->input->post('orders_id');
        $store = $this->input->post('store_id');

        //PERMISSIONS
        foreach ($orders as $value) {
            $uri_segment = array('order_id' => $value, 'store_id' => $store);
            checkForPermission($this->session->userdata('user_id'), $uri_segment, 'orders');
        }
        //END OF PERMISSIONS

        $this->load->model('sell_model');
        $CI = & get_instance();
        $CI->load->model('../../../../shared_resources/models/shared_model', 'shared_model', TRUE);

        $store_data = $CI->shared_model->get_info_store($store);

        $checkAmount = $this->sell_model->confirming_deposit($orders, $store_data->currency);
        $totalAmount = 0;
        foreach ($checkAmount as $item) {
            $totalAmount = $totalAmount + $item->total_sale_price;
        }

        if (number_format($totalAmount, 2) == number_format($this->input->post('amount'), 2)) {
            $data['payment_order'] = $this->sell_model->generate_payment_order($orders, $store, $totalAmount, $store_data->currency);
        } else {
            redirect(base_url() . 'orders');
        }
        //print_r($data['payment_order']);
        $this->load->view('orders/deposit_confirmation_view', $data);
    }

    /**
     * ID Page for this controller.
     *
     * Shows a specific store determined by its ID
     */
    public function id() {

        if (!$this->uri->segment(3) OR !$this->uri->segment(4)) {

            page_not_found();
        } else {
            //PERMISSIONS
            $uri_segment = array('order_id' => $this->uri->segment(3), 'store_id' => $this->uri->segment(4));
            checkForPermission($this->session->userdata('user_id'), $uri_segment, 'orders');
            //END OF PERMISSIONS

            $this->load->model('sell_model');
            $CI = & get_instance();
            $CI->load->model('../../../../shared_resources/models/shared_model', 'shared_model', TRUE);

            $order_id = $this->uri->segment(3);
            $store_id = $this->uri->segment(4);
            $data['store'] = $CI->shared_model->get_store($store_id, $filter_live = FALSE, $this->sitio);
            $data['contactos_tienda'] = $CI->shared_model->get_contactos_tienda($store_id);
            $data['order'] = $CI->shared_model->get_order_byUserId($order_id, $this->session->userdata('user_id'));
            $data['messages'] = $CI->shared_model->get_messages($order_id, $this->sitio);
            $data['sitio'] = $this->sitio;
            $data['datos_facturacion'] = $CI->shared_model->get_info_factura_byOrder($order_id);

            $this->load->view('../../../../shared_resources/views/orders/id_view', $data);
        }
    }

    /**
     * Store functions.
     *
     * Specific functions for stores
     */
    public function store() {

        if (!$store_id = $this->uri->segment(3)) {

            page_not_found();
        } else {

            $user_id = $this->session->userdata('user_id');

            //PERMISSIONS
            $uri_segment = array('store_id' => $store_id);
            checkForPermission($user_id, $uri_segment, 'stores');
            //END OF PERMISSIONS

            $this->load->model('sell_model');

            $q = $this->db->get_where('stores', array('tienda_pruebas' => 0, 'id' => $store_id));
            $r = $q->result();

            if (!$r) {
                redirect('/stores');
            } else {

                $this->load->model('sell_model');
                $CI = & get_instance();
                $CI->load->model('../../../../shared_resources/models/shared_model', 'shared_model', TRUE);

                // Agregue un objeto que traiga los datos de la tienda para poder actualizar el titulo y descripcion
                $data['store'] = $CI->shared_model->get_store($store_id, $filter_live = FALSE, $this->sitio);

                //$status_array = array( 	 'incomplete', 
                //						 'new', 
                //						 'waiting_for_payment', 
                //						 'sin_fondos', 
                //						 'pending', 
                //						 'en_ruta', 
                //						 'delivered',
                //						 'cancelled',
                //						 'to_be_canceled',
                //						 'confirmed',
                //					 	 'cancelled',
                //						 'closed'
                //					 );
                //
				//foreach ($status_array as $status) {
                //	if($get_orders = $this->sell_model->get_store_orders($user_id, $store_id, $status)){
                //		$data['orders'][$status] = $get_orders;
                //	}
                //}
                //var_dump(json_encode($data['orders'])); exit;

                $data['tuto'] = $this->sell_model->get_tuto('orders');

                $data['config_search'] = array(
                    'titie' => 'Ordenes',
                    'description' => 'Ingresa uno o mÃ¡s parÃ¡metros de bÃºsqueda:',
                    'main' => array(
                        'order_ids' => array(
                            'placeholder' => 'Id de orden',
                            'type' => 'text',
                            'options' => array(
                            ),
                        ),
                        //'store_names' => array(
                        //	'placeholder' => 'Nombre de tienda',
                        //	'type' => 'text',
                        //	'options' => array(
                        //		
                        //	),
                        //),
                        'user_emails' => array(
                            'placeholder' => 'Email consumidor',
                            'type' => 'text',
                            'options' => array(
                            ),
                        ),
                        'no_guias' => array(
                            'placeholder' => 'Num. GuÃ­a',
                            'type' => 'text',
                            'options' => array(
                            ),
                        ),
                    ),
                    'advanced' => array(
                        //'referencuas_options' => array(
                        //	'label' => 'Por Referencia',
                        //	'items' => array(
                        //		// Referencias
                        //		'ref_bbva' => array(
                        //			'placeholder' => 'Referencias Bancomer',
                        //			'type' => 'text',
                        //			'options' => array(
                        //				
                        //			),
                        //		),
                        //		'ref_oxxo' => array(
                        //			'placeholder' => 'Referencias Oxxo',
                        //			'type' => 'text',
                        //			'options' => array(
                        //				
                        //			),
                        //		),
                        //		'ref_oxxo_k' => array(
                        //			'placeholder' => 'Referencias Oxxo Kichink',
                        //			'type' => 'text',
                        //			'options' => array(
                        //				
                        //			),
                        //		),
                        //		'ref_seven' => array(
                        //			'placeholder' => 'Referencias 7-Eleven',
                        //			'type' => 'text',
                        //			'options' => array(
                        //				
                        //			),
                        //		),
                        //	),
                        //),
                        //
						//'vip_status_options' => array(
                        //	'label' => 'Por estatus VIP',
                        //	'items' => array(
                        //		// Vip
                        //		'vip_status' => array(
                        //			'placeholder' => '',
                        //			'type' => 'checkbox',
                        //			'options' => array(
                        //				'vip_buyer' => array(
                        //					'placeholder' => 'Comprador'
                        //				)
                        //			),
                        //		),
                        //	),
                        //),

                        'status_options' => array(
                            'label' => 'Por estatus',
                            'items' => array(
                                //Status
                                'status' => array(
                                    'placeholder' => '',
                                    'type' => 'checkbox',
                                    'options' => array(
                                        'waiting_for_payment' => array(
                                            'placeholder' => 'Esperando pago',
                                            'categorie_color' => true,
                                        ),
                                        'new' => array(
                                            'placeholder' => 'Pagada',
                                            'categorie_color' => true,
                                        ),
                                        'confirmed' => array(
                                            'placeholder' => 'Confirmada',
                                            'categorie_color' => true,
                                        ),
                                        'en_ruta' => array(
                                            'placeholder' => 'En ruta',
                                            'categorie_color' => true,
                                        ),
                                        'delivered' => array(
                                            'placeholder' => 'Entregada',
                                            'categorie_color' => true,
                                        ),
                                        'cancelled' => array(
                                            'placeholder' => 'Cancelada',
                                            'categorie_color' => true,
                                        ),
                                    ),
                                ),
                            ),
                        ),
                    //'tipo_envio_options' => array(
                    //	'label' => 'Por tipo de envÃ­o',
                    //	'items' => array(
                    //		// Tipo envio
                    //		'tipo_envio' => array(
                    //			'placeholder' => '',
                    //			'type' => 'checkbox',
                    //			'options' => array(
                    //				'digital' => array(
                    //					'placeholder' => 'Digital',
                    //				),
                    //				'local' => array(
                    //					'placeholder' => 'Local',
                    //				),
                    //				'local_express' => array(
                    //					'placeholder' => 'Local Express',
                    //				),
                    //				'nac' => array(
                    //					'placeholder' => 'Nacional',
                    //				),
                    //				'nac_express' => array(
                    //					'placeholder' => 'Nacional Express',
                    //				),
                    //				'delivered' => array(
                    //					'placeholder' => 'Entregada',
                    //				),
                    //				'inter' => array(
                    //					'placeholder' => 'Internacional',
                    //				),
                    //				'inter_express' => array(
                    //					'placeholder' => 'Int. Express',
                    //				),
                    //			),
                    //		),
                    //	),
                    //),
                    //'tarjeta_options' => array(
                    //	'label' => 'Por tarjeta y monto',
                    //	'items' => array(
                    //		// Opciones tarjeta
                    //		'tarjeta' => array(
                    //			'placeholder' => 'Ãltimos 4 dÃ­gitos de TDC',
                    //			'type' => 'text',
                    //			'options' => array(
                    //				
                    //			),
                    //		),
                    //		'total_price' => array(
                    //			'placeholder' => 'Monto exacto sin puntuaciÃ³n',
                    //			'type' => 'text',
                    //			'options' => array(
                    //				
                    //			),
                    //		),
                    //	),
                    //),
                    //'cash_options' => array(
                    //	'label' => 'Por ConfirmaciÃ³n P. E.',
                    //	'items' => array(
                    //		// Opciones 
                    //		'cash_confirm' => array(
                    //			'placeholder' => 'ConfirmaciÃ³n pago efectivo',
                    //			'type' => 'text',
                    //			'options' => array(
                    //				
                    //			),
                    //		)
                    //	),
                    //),				
                    //'date_options' => array(
                    //	'label' => 'Por fecha de creaciÃ³n',
                    //	'items' => array(
                    //		// Opciones de periodo
                    //		'date_from' => array(
                    //			'placeholder' => 'Desde (DD-MM-AAAA)',
                    //			'type' => 'date',
                    //			'options' => array(
                    //				
                    //			),
                    //		),
                    //		'date_to' => array(
                    //			'placeholder' => 'Hasta (DD-MM-AAAA)',
                    //			'type' => 'date',
                    //			'options' => array(
                    //				
                    //			),
                    //		),
                    //	),
                    //),
                    ),
                    'url_action' => '/api/stores/get_store_orders',
                    'user_pref' => array(),
                );

                // Getting user fields preferences
                //$data['user_pref'] = $this->get_user_preferences();
                $data['user_pref'] = $user_pref = array("name", "id", "units_total", "total_sale_price", "currency", "time_left", "order_created", "", "total_order_MXN", "total_order_USD");
                $data['user_stores'] = $this->sell_model->get_all_user_stores();

                // Vieja Vista
                //$this->load->view('v2/orders/index_view', $data);
                // Nueva Vista
                $this->load->view('v2/layout/header_new', $data);
                $this->load->view('v2/stores/menu_store', $data);
                $this->load->view('v2/stores/sidebar_left', $data);
                $this->load->view('v2/orders/orders_store_view', $data);
            }
        }
    }

    private function get_user_preferences() {

        $array = array();
        $user_id = $this->session->userdata('user_id');
        $q = $this->db->get_where('admin_user_pref', array('user_id' => $user_id));

        if ($r = $q->result()) {

            $preferencias = json_decode($r[0]->preferences);
            if ($preferencias) {
                foreach ($preferencias->orders as $pref) {
                    $array[] = $pref;
                }
                return $array;
            } else {
                return $array;
            }
        } else {
            return $array;
        }
    }

    public function cancel_order() {
        // Validate -> Process -> Store
        // Redirect
    }

    public function update_order() {
        // Validate -> Process -> Store
        // Redirect
    }

    public function addMessage() {

        $order_id = $this->input->post('order_id');
        $store_id = $this->input->post('store_id');
        $msg = $this->input->post('contact_text');

        if (!$msg) {

            redirect('orders/id/' . $order_id . '/' . $store_id);
        } else {

            //PERMISSIONS
            $uri_segment = array('order_id' => $order_id, 'store_id' => $store_id);
            checkForPermission($this->session->userdata('user_id'), $uri_segment, 'orders');
            //END OF PERMISSIONS

            $CI = & get_instance();
            $CI->load->model('../../../../shared_resources/models/shared_model', 'shared_model', TRUE);

            $CI->shared_model->add_message($order_id, $store_id, $this->input->post('contact_text'), $group = 'sell'); //sell = store
            redirect('orders/id/' . $order_id . '/' . $store_id);
        }
    }

    public function program_delivery_pickup() {

        //PERMISSIONS--PENDING
        //END OF PERMISSIONS

        $hour_from = '08:00';
        $hour_to = '18:00';
        $date = $this->input->post('date');
        $dateFrom = $date . ' ' . $hour_from . ':00';
        $dateTo = $date . ' ' . $hour_to . ':00';
        $now = time();


        $diff = strtotime($dateTo) - strtotime($dateFrom);
        $hrsDiff = floor($diff / 60 / 60);

        if (!$date) {
            //no date
            echo $this->lang->line('shared_order_view_pickup_error_selectDay');
        } elseif (strtotime($dateFrom) > strtotime($dateTo)) {
            // error
            echo $this->lang->line('shared_order_view_pickup_error_incorrectRange');
        } elseif ($hrsDiff < 5) {
            //another error
            echo $this->lang->line('shared_order_view_pickup_error_5hoursRange');
        } else {

            $this->load->model('sell_model');
            $CI = & get_instance();
            $CI->load->model('../../../../shared_resources/models/shared_model', 'shared_model', TRUE);

            $response = false;

            // Actualizo orden
            if ($this->sell_model->update_order_status($this->input->post('order_id'), $status = 'confirmed', $dateFrom, $dateTo)) {
                $response = true;
            }

            $order_info = $CI->shared_model->get_order_byUserId($this->input->post('order_id'), $this->session->userdata('user_id'));
            $store = $CI->shared_model->get_info_store($order_info['partidas'][0]->store_id);
            $destinatario_data = $this->sell_model->get_destinatario($order_info['info'][0]->id);
            $customer = $this->sell_model->get_user_info($order_info['info'][0]->buyer_email, $id = false);

            // Envio correos
            if ($this->sell_model->send_confirmation_mails($order_info, $destinatario_data, $store, $customer)) {
                $response = true;
            }

            if ($response) {
                echo 'success';
            } else {
                echo 'Error: ' . $this->lang->line('shared_order_view_pickup_error_sendingMail');
            }
        }
    }

}

/* End of file orders.php */
/* Location: ./application/controllers/orders.php */