<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"> 
<!--
 Copyright 2010 Google Inc. 
 Licensed under the Apache License, Version 2.0: 
 http://www.apache.org/licenses/LICENSE-2.0 
 --> 
 
<html xmlns="http://www.w3.org/1999/xhtml"> 
 
<head> 
<meta http-equiv="Content-Type" content="text/html;charset=utf-8" /> 
<title>Google Maps API v3 Geocoder Tool</title> 
<script type="text/javascript" src="https://ajax.googleapis.com/ajax/libs/jquery/1.6.2/jquery.min.js"></script> 
<script type="text/javascript" src="http://maps.google.com/maps/api/js?sensor=false"></script> 

<script type="text/javascript"> 
 
var MAPFILES_URL = "http://maps.gstatic.com/intl/en_us/mapfiles/";
 
var map = null;
var geocoder = null;
var shadow = null;
var clickIcon = null;
var clickMarker = null;
var markers = null;
var selected = null;
var infowindow = null;
var boundsOverlay = null;
var viewportOverlay = null;
var initialized = false;
var hashFragment = "";
 
var GeocoderStatusDescription = {
  "OK": "The request did not encounter any errors",
  "UNKNOWN_ERROR": "A geocoding or directions request could not be successfully processed, yet the exact reason for the failure is not known",
  "OVER_QUERY_LIMIT": "The webpage has gone over the requests limit in too short a period of time",
  "REQUEST_DENIED": "The webpage is not allowed to use the geocoder for some reason",
  "INVALID_REQUEST": "This request was invalid",
  "ZERO_RESULTS": "The request did not encounter any errors but returns zero results",
  "ERROR": "There was a problem contacting the Google servers"
};
 
var GeocoderLocationTypeDescription = {
  "ROOFTOP": "The returned result reflects a precise geocode.",
  "RANGE_INTERPOLATED": "The returned result reflects an approximation (usually on a road) interpolated between two precise points (such as intersections). Interpolated results are generally returned when rooftop geocodes are unavilable for a street address.",
  "GEOMETRIC_CENTER": "The returned result is the geometric center of a result such a line (e.g. street) or polygon (region).",
  "APPROXIMATE": "The returned result is approximate."
}
 
function init() {
  var params = parseUrlParams();
  clearOptions();
  setOptions(params);
 
  var mapOptions = {
    'zoom': (params.zoom ? params.zoom : 1),
    'center': (params.center ? params.center : new google.maps.LatLng(0.0,0.0)),
    'mapTypeId': google.maps.MapTypeId.ROADMAP,
    'scaleControl': true
  }
  map = new google.maps.Map(document.getElementById("map"), mapOptions);
  
  geocoder = new google.maps.Geocoder();
  
 infowindow = new google.maps.InfoWindow({
    'size': new google.maps.Size(292, 120)
  });

  
  shadow = new google.maps.MarkerImage(
    MAPFILES_URL + "shadow50.png",
    new google.maps.Size(37, 34),
    new google.maps.Point(0, 0),
    new google.maps.Point(10, 34)
  );
   
  clickIcon = new google.maps.MarkerImage(
    MAPFILES_URL + 'dd-start.png',
    new google.maps.Size(20, 34),
    new google.maps.Point(0, 0),
    new google.maps.Point(10, 34)
  );
    
  google.maps.event.addListener(map, 'click', onClickCallback);
  
  // Bounds changes are asynchronous in v3, so we have to wait for the idle
  // event to ensure that viewport biasing picks up the correct viewport
  google.maps.event.addListener(map, 'idle', function() {
    if (document.getElementById("query").value && ! initialized) {
      submitQuery();
    }
    initialized = true;
  });
  
  document.getElementById('query').onkeyup = function(e) {
    if (!e) var e = window.event;
    if (e.keyCode != 13) return;
    document.getElementById("query").blur();
    submitQuery();
  }
  
  setInterval(checkHashFragment, 200);
}
 

function onClickCallback(event){
    document.getElementById("query").value = event.latLng.toUrlValue(6);
    geocode({ 'latLng': event.latLng });
 
}

 
function checkHashFragment() {
  if (unescape(window.location.hash) != unescape(hashFragment)) {
    var params = parseUrlParams();
    clearOptions();
    setOptions(params);
    if (params.zoom && params.center) {
      map.setZoom(params.zoom);
      map.setCenter(params.center);
      initialized = false;
    } else if (document.getElementById("query").value) {
      submitQuery();
    }
  }
}
 
function parseUrlParams() {
  var params = {};
  
  if (window.location.search) {
    params.query = unescape(window.location.search.substring(1));
  }
  
  if (window.location.hash) {
    hashFragment = unescape(window.location.hash);
    var args = hashFragment.substring(1).split('&');
    for (var i in args) {
      var param = args[i].split('=');
      switch (param[0]) {
        case 'q':
          params.query = unescape(param[1]);
          break;
        case 'vpcenter':
          var center = parseLatLng(param[1]);
          if (center != null) {
            params.center = center;
          }
          break;
        case 'vpzoom':
          var zoom = parseInt(param[1]);
          if (! isNaN(zoom)) {
            params.zoom = zoom;
          }
          break;
        case 'country':
          params.country = unescape(param[1]);
          break;
        case 'language':
          params.language = unescape(param[1]);
          break;
      }
    }
  }
  
  return params;
}
 
function clearOptions() {
  document.getElementById("query").value = '';
  document.getElementById("biasViewport").checked = false;
  document.getElementById("country").value = '';
  document.getElementById("language").value = '';  
}
 
function setOptions(params) {
  if (params.query) {
    document.getElementById("query").value = params.query;
  }
  
  if (params.zoom && params.center) {
    document.getElementById("biasViewport").checked = true;
  }
  
  if (params.country) {
    document.getElementById("country").value = params.country;
  }
 
  if (params.language) {
    document.getElementById("language").value = params.language;
  }
}
 
function submitQuery() {
  var query = document.getElementById("query").value;
  if (/\s*^\-?\d+(\.\d+)?\s*\,\s*\-?\d+(\.\d+)?\s*$/.test(query)) {
    var latlng = parseLatLng(query);
    if (latlng == null) {
      document.getElementById("query").value = "";
    } else {
      geocode({ 'latLng': latlng });
    }
  } else {
    geocode({ 'address': query });
  }
}
 
function geocode(request) {  
  
  resetMap();
  var hash = '';
  
  if (request.latLng) {

    clickMarker = new google.maps.Marker({
      'position': request.latLng,
      'map': map,
      'title': request.latLng.toString(),
      'clickable': false,
      'icon': clickIcon,
      'shadow': shadow
    });
    hash = 'q=' + request.latLng.toUrlValue(6);
  } else {
    hash = 'q=' + request.address;
  }
  
  var vpbias = document.getElementById("biasViewport").checked;
  var country = document.getElementById("country").value;
  var language = document.getElementById("language").value;
  
  if (vpbias) {
    hash += '&vpcenter=' + map.getCenter().toUrlValue(6);
    hash += '&vpzoom=' + map.getZoom();
    request.bounds = map.getBounds();
  }
  
  if (country) {
    hash += '&country=' + country;
    request.country = country;
  }
  
  if (language) {
    hash += '&language=' + language;
    request.language = language;
  }
 
  hashFragment = '#' + escape(hash);
  window.location.hash = escape(hash);
  geocoder.geocode(request, showResults);
}
 
function parseLatLng(value) {
  value.replace('/\s//g');
  var coords = value.split(',');
  var lat = parseFloat(coords[0]);
  var lng = parseFloat(coords[1]);
  if (isNaN(lat) || isNaN(lng)) {
    return null;
  } else {
    return new google.maps.LatLng(lat, lng);
  }
}
 
function resetMap() {
  infowindow.close();
 
  if (clickMarker != null) {
    clickMarker.setMap(null);
    clickMarker = null;
  }
  
  for (var i in markers) {
    markers[i].setMap(null);
  }
  
  markers = [];
  selected = null;
  clearBoundsOverlays();
  
  //document.getElementById("responseCount").style.display = "none";
  //document.getElementById("matches").style.display = "none";
}
 
function showResults(results, status) {
 	
  var reverse = (clickMarker != null);
  
  if (! results) {
    alert("Geocoder did not return a valid response");
  } else {
    //document.getElementById("statusValue").innerHTML = status;
    //document.getElementById("statusDescription").innerHTML = GeocoderStatusDescription[status];
 
   // document.getElementById("responseInfo").style.display = "block";    
   // document.getElementById("responseStatus").style.display = "block";
 
    if (status == google.maps.GeocoderStatus.OK) {
      //document.getElementById("matchCount").innerHTML = results.length;       
      //document.getElementById("responseCount").style.display = "block";
      plotMatchesOnMap(results, reverse);
    } else {
      if (! reverse) {
        map.setCenter(new google.maps.LatLng(0.0, 0.0));
        map.setZoom(1);
      }
    }
  }
}
 
function plotMatchesOnMap(results, reverse) {
  
  markers = new Array(results.length);
  var resultsListHtml = "";
  
  var openInfoWindow = function(resultNum, result, marker) {
    return function() {
      if (selected != null) {
        document.getElementById('p' + selected).style.backgroundColor = "white";
        clearBoundsOverlays();
      }
      
      map.fitBounds(result.geometry.viewport);
      infowindow.setContent(getAddressComponentsHtml(result.address_components));
      //infowindow.open(map, marker);
      console.log(result);
      //alert(request.latLng.geometry.location.lng());
	    $('#long_field').val(result.geometry.location.lng());
		$('#lat_field').val(result.geometry.location.lat());
	    $('#query').val(result.formatted_address);
      if (result.geometry.bounds) {
        
        boundsOverlay = new google.maps.Rectangle({
          'bounds': result.geometry.bounds,
          'strokeColor': '#ff0000',
          'strokeOpacity': 1.0,
          'strokeWeight': 2.0,
          'fillOpacity': 0.0
        });
        boundsOverlay.setMap(map);
        google.maps.event.addListener(boundsOverlay, 'click', onClickCallback);
        //document.getElementById('boundsLegend').style.display = 'block';
      } else {
        boundsOverlay = null;
      }
      
      viewportOverlay = new google.maps.Rectangle({
          'bounds': result.geometry.viewport,
          'strokeColor': '#0000ff',
          'strokeOpacity': 1.0,
          'strokeWeight': 2.0,
          'fillOpacity': 0.0
        });
      viewportOverlay.setMap(map);
      google.maps.event.addListener(viewportOverlay, 'click', onClickCallback);
      //document.getElementById('viewportLegend').style.display = 'block';
 
      //document.getElementById('p' + resultNum).style.backgroundColor = "#eeeeff";
      //document.getElementById('matches').scrollTop =
        //document.getElementById('p' + resultNum).offsetTop -
        //document.getElementById('matches').offsetTop;
      selected = resultNum;
    }
  }
    
  for (var i = 0; i < results.length; i++) {
    var icon = new google.maps.MarkerImage(
      getMarkerImageUrl(i),
      new google.maps.Size(20, 34),
      new google.maps.Point(0, 0),
      new google.maps.Point(10, 34)
    );
    
    markers[i] = new google.maps.Marker({
      'position': results[i].geometry.location,
      'map': map,
      'icon': icon,
      'shadow': shadow
    });
 
    google.maps.event.addListener(markers[i], 'click', openInfoWindow(i, results[i], markers[i]));
    
    resultsListHtml += getResultsListItem(i, getResultDescription(results[i]));
  }
  
  //document.getElementById("matches").innerHTML = resultsListHtml;
  //document.getElementById("p0").style.border = "none";
  //document.getElementById("matches").style.display = "block";
 
  if (reverse){
      // make a smooth movement to the clicked position
      map.panTo(clickMarker.getPosition());
      google.maps.event.addListenerOnce(map, 'idle', function(){
        selectMarker(0);
      });
  }
 
  else {
      zoomToViewports(results);
      selectMarker(0);
  }
  
  
}
 
function selectMarker(n) {
  google.maps.event.trigger(markers[n], 'click');
}
 
function zoomToViewports(results) {
  var bounds = new google.maps.LatLngBounds();
 
  for (var i in results) {
    bounds.union(results[i].geometry.viewport);
  }
 
  map.fitBounds(bounds);
}
 
function getMarkerImageUrl(resultNum) {
  return MAPFILES_URL + "marker" + String.fromCharCode(65 + resultNum) + ".png";
}
 
function getResultsListItem(resultNum, resultDescription) {
  var html  = '<a onclick="selectMarker(' + resultNum + ')">';
      html += '<div class="info" id="p' + resultNum + '">';
      html += '<table><tr valign="top">';
      html += '<td style="padding: 2px"><img src="' + getMarkerImageUrl(resultNum) + '"/></td>';
      html += '<td style="padding: 2px">' + resultDescription + '</td>';
      html += '</tr></table>';
      html += '</div></a>';
  return html;
}
 
function getResultDescription(result) {
  var bounds = result.geometry.bounds;
  var html  = '<table class="tabContent">';
      html += tr('Address', result.formatted_address);
      html += tr('Types', result.types.join(", "));
      html += tr('Location', result.geometry.location.toString());
      html += tr('Bounds', (bounds ? boundsToHtml(bounds) : "None"));
      html += tr('Viewport', boundsToHtml(result.geometry.viewport));
      html += tr('Location type', result.geometry.location_type);
      if (result.partial_match) {
        html += tr('Partial match', 'Yes');
      }
      html += '</table>';
  return html;
}
 
function getAddressComponentsHtml(components) {
  var html = '<div class="infoWindowContent">' +
               '<table class="tabContent">';
               
  for (var i = 0; i < components.length; i++) {    
    html += tr("Long name", components[i].long_name);
    html += tr("Short name", components[i].short_name);
    html += tr("Types", components[i].types[0]);
    for (var j = 1; j < components[i].types.length; j++) {
      html += tr("", components[i].types[j]);
    }
    if (i < components.length-1) {
      html += br();
    }
  }
  
  html += '</table></div>';
  return html;
}
 
function tr(key, value) {
  return '<tr>' +
           '<td class="key">' + key + (key ? ':' : '') + '</td>' +
           '<td class="value">' + value + '</td>' +
         '</tr>';
}
 
function br() {
  return '<tr><td colspan="2"><div style="width: 100%; border-bottom: 1px solid grey; margin: 2px;"</td></tr>';
}
 
function clearBoundsOverlays() {
  if (boundsOverlay != null) {
    boundsOverlay.setMap(null);
    //document.getElementById('boundsLegend').style.display = 'none';
  }
  if (viewportOverlay != null) {
    viewportOverlay.setMap(null);
    //document.getElementById('viewportLegend').style.display = 'none';
  }
}
 
function boundsToHtml(bounds) {
  return '(' +
    bounds.getSouthWest().toUrlValue(6) +
    ') -<br/>(' +
    bounds.getNorthEast().toUrlValue(6) +
    ')';
}

$(document).ready(function(){
   	$('#query').keydown(function(event){
	    if(event.keyCode == 13) {
	      event.preventDefault();
	      return false;
	    }
	  });
 });
</script> 
 
<style> 
/* RESETS */
html,body,div,span,applet,object,iframe,h1,h2,h3,h4,h5,h6,p,blockquote,pre,a,abbr,acronym,address,big,cite,code,del,dfn,em,font,img,ins,kbd,q,s,samp,small,strike,strong,sub,sup,tt,var,b,u,i,center,dl,dt,dd,ol,ul,li,fieldset,form,label,legend,table,caption,tbody,tfoot,thead,tr,th,td{margin:0;padding:0;border:0;outline:0;font-size:100%;vertical-align:baseline;background:transparent}body{line-height:1}ol,ul{list-style:none}blockquote,q{quotes:none}blockquote:before,blockquote:after,q:before,q:after{content:'';content:none}:focus{outline:0}ins{text-decoration:none}del{text-decoration:line-through}table{border-collapse:collapse;border-spacing:0}

body{
	font-family: Helvetica, Arial;
	font-size: 12px;
	
}
#mapcontainer {
  position: relative;
  width: 650px;
  height: 300px;
  margin: 10px;
  float: left;
}
 
#map {
  width: 100%;
  height: 100%;
  border: 1px solid black;
  position: absolute;
}
 
#boundsLegend,#viewportLegend {
  position: absolute;
  background-color: white;
  right: 1px;
  font-family: sans-serif;
  font-size: small;
  padding: 2px;
  color: #222222;
  display: none;
}
 
#boundsLegend {
  border: 1px solid red;
  bottom: 40px;
}
 
#viewportLegend {
  border: 1px solid blue;
  bottom: 15px;
}
 
#responseStatus {
  display: none;
}
 
#responseCount {
  display: none;
}
 
#responseInfo {
  margin-top: 10px;
  margin-left: 10px;
  background-color: #eeeeee;
  border: 1px solid #999999;
  padding: 10px;
  width: 400px;
  display: none;
}
 
.info {
  border-top: 1px solid #666666;
  padding: 4px;
  padding-left: 8px;
  font: 10pt sans-serif;
  margin-left: 4px;
  margin-right: 4px;
  cursor: pointer;
  background-color: white;
}
 
.infoWindowContent {
  width: 272px;
  height: 120px;
  overflow: auto;
}
 
.tabContent {
  font: 10pt sans-serif;
  border-collapse: collapse;
  table-layout: auto;
}
 
#matches {
  margin-top: 10px;
  width: 320px;
  height: 490px;
  float: left;
  border: 1px solid #666666;
  display: none;
  overflow: auto;
}
 
h1 {
  border-bottom: 1px solid #999999;
  font-family: sans-serif;
  padding-bottom: 12px;
  width: 300px;
  margin-bottom: 0px;
}
 
#inputForm {
  width: 650px;
  margin: 10px;
}
 
#footer {
  padding-top: 4px;
  font-family: sans-serif;
  font-size: 8pt;
  clear: both;
  width: 300px;
  border-top: 1px solid #999999;
}
 
#instructions {
  padding-bottom: 8px;
}
 
.key {
  text-align: right;
  font-weight: bold;
  vertical-align: top;
  white-space: nowrap 
}
 
.value {
  vertical-align: top;  
}
 
#options {
  margin-top: 5px;
}
 
#biasViewport,#country {
  margin-right: 16px;
}
 
#newFeatures {
  position: absolute;
  top: 1px;
  right: -2px;
  background-color: #ffffd0;
  border: 1px solid black;
  font-family: sans-serif;
  font-size: 8pt;
  padding: 2px;
}.btn.danger,
.alert-message.danger,
.btn.danger:hover,
.alert-message.danger:hover,
.btn.error,
.alert-message.error,
.btn.error:hover,
.alert-message.error:hover,
.btn.success,
.alert-message.success,
.btn.success:hover,
.alert-message.success:hover,
.btn.info,
.alert-message.info,
.btn.info:hover,
.alert-message.info:hover {
  color: #ffffff;
}
.btn .close, .alert-message .close {
  font-family: Arial, sans-serif;
  line-height: 18px;
}
.btn.danger,
.alert-message.danger,
.btn.error,
.alert-message.error {
  background-color: #c43c35;
  background-repeat: repeat-x;
  background-image: -khtml-gradient(linear, left top, left bottom, from(#ee5f5b), to(#c43c35));
  background-image: -moz-linear-gradient(top, #ee5f5b, #c43c35);
  background-image: -ms-linear-gradient(top, #ee5f5b, #c43c35);
  background-image: -webkit-gradient(linear, left top, left bottom, color-stop(0%, #ee5f5b), color-stop(100%, #c43c35));
  background-image: -webkit-linear-gradient(top, #ee5f5b, #c43c35);
  background-image: -o-linear-gradient(top, #ee5f5b, #c43c35);
  background-image: linear-gradient(top, #ee5f5b, #c43c35);
  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#ee5f5b', endColorstr='#c43c35', GradientType=0);
  text-shadow: 0 -1px 0 rgba(0, 0, 0, 0.25);
  border-color: #c43c35 #c43c35 #882a25;
  border-color: rgba(0, 0, 0, 0.1) rgba(0, 0, 0, 0.1) rgba(0, 0, 0, 0.25);
}
.btn.success, .alert-message.success {
  background-color: #57a957;
  background-repeat: repeat-x;
  background-image: -khtml-gradient(linear, left top, left bottom, from(#62c462), to(#57a957));
  background-image: -moz-linear-gradient(top, #62c462, #57a957);
  background-image: -ms-linear-gradient(top, #62c462, #57a957);
  background-image: -webkit-gradient(linear, left top, left bottom, color-stop(0%, #62c462), color-stop(100%, #57a957));
  background-image: -webkit-linear-gradient(top, #62c462, #57a957);
  background-image: -o-linear-gradient(top, #62c462, #57a957);
  background-image: linear-gradient(top, #62c462, #57a957);
  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#62c462', endColorstr='#57a957', GradientType=0);
  text-shadow: 0 -1px 0 rgba(0, 0, 0, 0.25);
  border-color: #57a957 #57a957 #3d773d;
  border-color: rgba(0, 0, 0, 0.1) rgba(0, 0, 0, 0.1) rgba(0, 0, 0, 0.25);
}
.btn.info, .alert-message.info {
  background-color: #339bb9;
  background-repeat: repeat-x;
  background-image: -khtml-gradient(linear, left top, left bottom, from(#5bc0de), to(#339bb9));
  background-image: -moz-linear-gradient(top, #5bc0de, #339bb9);
  background-image: -ms-linear-gradient(top, #5bc0de, #339bb9);
  background-image: -webkit-gradient(linear, left top, left bottom, color-stop(0%, #5bc0de), color-stop(100%, #339bb9));
  background-image: -webkit-linear-gradient(top, #5bc0de, #339bb9);
  background-image: -o-linear-gradient(top, #5bc0de, #339bb9);
  background-image: linear-gradient(top, #5bc0de, #339bb9);
  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#5bc0de', endColorstr='#339bb9', GradientType=0);
  text-shadow: 0 -1px 0 rgba(0, 0, 0, 0.25);
  border-color: #339bb9 #339bb9 #22697d;
  border-color: rgba(0, 0, 0, 0.1) rgba(0, 0, 0, 0.1) rgba(0, 0, 0, 0.25);
}
.btn {
  cursor: pointer;
  display: inline-block;
  background-color: #e6e6e6;
  background-repeat: no-repeat;
  background-image: -webkit-gradient(linear, 0 0, 0 100%, from(#ffffff), color-stop(25%, #ffffff), to(#e6e6e6));
  background-image: -webkit-linear-gradient(#ffffff, #ffffff 25%, #e6e6e6);
  background-image: -moz-linear-gradient(top, #ffffff, #ffffff 25%, #e6e6e6);
  background-image: -ms-linear-gradient(#ffffff, #ffffff 25%, #e6e6e6);
  background-image: -o-linear-gradient(#ffffff, #ffffff 25%, #e6e6e6);
  background-image: linear-gradient(#ffffff, #ffffff 25%, #e6e6e6);
  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#ffffff', endColorstr='#e6e6e6', GradientType=0);
  padding: 5px 14px 6px;
  text-shadow: 0 1px 1px rgba(255, 255, 255, 0.75);
  color: #333;
  font-size: 13px;
  line-height: normal;
  border: 1px solid #ccc;
  border-bottom-color: #bbb;
  -webkit-border-radius: 4px;
  -moz-border-radius: 4px;
  border-radius: 4px;
  -webkit-box-shadow: inset 0 1px 0 rgba(255, 255, 255, 0.2), 0 1px 2px rgba(0, 0, 0, 0.05);
  -moz-box-shadow: inset 0 1px 0 rgba(255, 255, 255, 0.2), 0 1px 2px rgba(0, 0, 0, 0.05);
  box-shadow: inset 0 1px 0 rgba(255, 255, 255, 0.2), 0 1px 2px rgba(0, 0, 0, 0.05);
  -webkit-transition: 0.1s linear all;
  -moz-transition: 0.1s linear all;
  -ms-transition: 0.1s linear all;
  -o-transition: 0.1s linear all;
  transition: 0.1s linear all;
}
.btn:hover {
  background-position: 0 -15px;
  color: #333;
  text-decoration: none;
}
.btn:focus {
  outline: 1px dotted #666;
}
.btn.primary {
  color: #ffffff;
  background-color: #0064cd;
  background-repeat: repeat-x;
  background-image: -khtml-gradient(linear, left top, left bottom, from(#049cdb), to(#0064cd));
  background-image: -moz-linear-gradient(top, #049cdb, #0064cd);
  background-image: -ms-linear-gradient(top, #049cdb, #0064cd);
  background-image: -webkit-gradient(linear, left top, left bottom, color-stop(0%, #049cdb), color-stop(100%, #0064cd));
  background-image: -webkit-linear-gradient(top, #049cdb, #0064cd);
  background-image: -o-linear-gradient(top, #049cdb, #0064cd);
  background-image: linear-gradient(top, #049cdb, #0064cd);
  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#049cdb', endColorstr='#0064cd', GradientType=0);
  text-shadow: 0 -1px 0 rgba(0, 0, 0, 0.25);
  border-color: #0064cd #0064cd #003f81;
  border-color: rgba(0, 0, 0, 0.1) rgba(0, 0, 0, 0.1) rgba(0, 0, 0, 0.25);
}
.btn.active, .btn:active {
  -webkit-box-shadow: inset 0 2px 4px rgba(0, 0, 0, 0.25), 0 1px 2px rgba(0, 0, 0, 0.05);
  -moz-box-shadow: inset 0 2px 4px rgba(0, 0, 0, 0.25), 0 1px 2px rgba(0, 0, 0, 0.05);
  box-shadow: inset 0 2px 4px rgba(0, 0, 0, 0.25), 0 1px 2px rgba(0, 0, 0, 0.05);
}
.btn.disabled {
  cursor: default;
  background-image: none;
  filter: progid:DXImageTransform.Microsoft.gradient(enabled = false);
  filter: alpha(opacity=65);
  -khtml-opacity: 0.65;
  -moz-opacity: 0.65;
  opacity: 0.65;
  -webkit-box-shadow: none;
  -moz-box-shadow: none;
  box-shadow: none;
}
.btn[disabled] {
  cursor: default;
  background-image: none;
  filter: progid:DXImageTransform.Microsoft.gradient(enabled = false);
  filter: alpha(opacity=65);
  -khtml-opacity: 0.65;
  -moz-opacity: 0.65;
  opacity: 0.65;
  -webkit-box-shadow: none;
  -moz-box-shadow: none;
  box-shadow: none;
}
.btn.large {
  font-size: 15px;
  line-height: normal;
  padding: 9px 14px 9px;
  -webkit-border-radius: 6px;
  -moz-border-radius: 6px;
  border-radius: 6px;
}
.btn.small {
  padding: 7px 9px 7px;
  font-size: 11px;
}
:root .alert-message, :root .btn {
  border-radius: 0 \0;
}
button.btn::-moz-focus-inner, input[type=submit].btn::-moz-focus-inner {
  padding: 0;
  border: 0;
}
</style> 
</head> 
 
<body onload="init()"> 
<h3><?=$this->lang->line('stores_settings_locationsTab_add_text_1')?></h3>
	<form method="post" action="">
	<div id="inputForm"> 
	  
	  <div> 
	    <span style="font-size:12px;"><?=$this->lang->line('stores_settings_locationsTab_add_text_2')?></span> 
	    <input type="text" size="36" id="query" name="address" class="span4"/> 
	    <input type="button" value="<?=$this->lang->line('stores_settings_locationsTab_locate_button_text')?>" onclick="submitQuery()"/> 
	  </div> 
	  <div id="options" style="display:none;"> 
	    <span style="font-weight: bold">Bias this viewport:</span> 
	    <input type="checkbox" id="biasViewport" value=""/> 
	    <span style="font-weight: bold">Country bias:</span> 
	    <input type="text" size="2" id="country" value="US"/> 
	    <span style="font-weight: bold">Language:</span> 
	    <input type="text" size="2" id="language" value="en"/> 
	  </div> 
	
	</div> 
	
	<div id="mapcontainer"> 
	  <div id="map"></div> 
	 
	</div> 
	<br />
	<div style="clear:both; height;1px;">&nbsp;</div>

	<span style="font-size:12px; color:#999; clear:both; display:none">
	 Coords: (lat:	<input class="span1 disabled" type="hidden" id="lat_field" name="lat" size="8" />  ,
			 long:	<input class="span1 disabled" type="hidden" id="long_field" name="long" size="8" />)
	</span>
	<div style="float:left">
        <br /><?=$this->lang->line('stores_settings_locationsTab_range_text')?>
        <select name="range">
            <option value="10"><?=$this->lang->line('stores_settings_locationsTab_range_option_1_text')?></option>
            <option value="100"><?=$this->lang->line('stores_settings_locationsTab_range_option_2_text')?></option>
            <option value="1000"><?=$this->lang->line('stores_settings_locationsTab_range_option_3_text')?></option>
        </select>
        <br />
    </div>
    <div style="margin-left:250px; float:left">
        <input type="hidden" name="store_id" value="<?=$this->uri->segment(3)?>" />
        <input type="submit" class="btn primary" value="<?=$this->lang->line('stores_settings_locationsTab_add_button_text')?>" style="margin:10px auto;" />
    </div>
	</form>
	
</body> 
</html> 