<?php if ( ! defined('BASEPATH')) exit('No direct script access allowed');

class Orders extends CI_Controller {
	
	function __construct()
	{
		parent::__construct();	
		checkForSession();
		geoIP();
	}

	/**
	 * Index Page for this controller.
	 *
	 * Shows all stores of a particular user
	 */
	public function index()
	{
		$this->load->model('sell_model');
		
		$user_id = $this->session->userdata('user_id');
		$data['stores'] = $this->sell_model->get_all_user_stores();
		$data['orders'] = array( 'incomplete' => $this->sell_model->get_all_user_orders($user_id, $status = 'incomplete'), 
								 'new' => $this->sell_model->get_all_user_orders($user_id, $status = 'new'), 
								 'waiting_for_payment' => $this->sell_model->get_all_user_orders($user_id, $status = 'waiting_for_payment'),
								 'sin_fondos' => $this->sell_model->get_all_user_orders($user_id, $status = 'sin_fondos'), 
								 'pending' => $this->sell_model->get_all_user_orders($user_id, $status = 'pending'), 
								 'delivered' => $this->sell_model->get_all_user_orders($user_id, $status = 'delivered'),
								 'confirmed' => $this->sell_model->get_all_user_orders($user_id, $status = 'confirmed'),
								 'closed' => $this->sell_model->get_all_user_orders($user_id, $status = 'closed')  
								);
		$this->load->view('orders/index_view', $data);
	}
	
	// This function checks delivered orders without a deposit process and generates a payment order 
	public function deposit_request()
	{
		
		if($this->input->post('store_id') AND $this->input->post('orders_id')){

			$store_id = $this->input->post('store_id');
		
			//PERMISSIONS
			foreach ($this->input->post('orders_id') as $value) {
				$uri_segment = array('order_id' => $value, 'store_id' => $store_id);
				checkForPermission($this->session->userdata('user_id'), $uri_segment, 'orders');
			}
			//END OF PERMISSIONS

			$this->load->model('sell_model');
			$store_data = $this->sell_model->get_info_store($store_id);
			
			if($store_data->bank_account!=''){
				$orders = $this->input->post('orders_id');
				$data['confirmation'] = $this->sell_model->confirming_deposit($orders, $store_data->currency); 
				$data['store'] = $store_id;
				$data['store_currency'] = $store_data->currency;
			}else{
				$data['flashMessage'] = 'You don&rsquo;t have a bank account registered, please go to your store settings and let us know where to deposit your money';
				$data['store'] = $store_id;
				$data['store_currency'] = $store_data->currency;

			}
			
			//print_r($data['confirmation']);
			$this->load->view('orders/deposit_request_view', $data);

		}else{

			redirect(base_url().'orders');

		}
		
	}
	
	public function generate_order()
	{

		$orders = $this->input->post('orders_id');
		$store = $this->input->post('store_id');

		//PERMISSIONS
			foreach ($orders as $value) {
				$uri_segment = array('order_id' => $value, 'store_id' => $store);
				checkForPermission($this->session->userdata('user_id'), $uri_segment, 'orders');
			}
		//END OF PERMISSIONS
		
		$this->load->model('sell_model');
		$store_data = $this->sell_model->get_info_store($store);

		$checkAmount = $this->sell_model->confirming_deposit($orders, $store_data->currency);
		$totalAmount = 0;
		foreach ($checkAmount as $item) {
			$totalAmount = $totalAmount + $item->total_sale_price;
		}
		
		if($totalAmount == $this->input->post('amount')){
			$data['payment_order'] =  $this->sell_model->generate_payment_order($orders, $store, $totalAmount, $store_data->currency);
		}else{
			redirect(base_url().'orders');
		}
		//print_r($data['payment_order']);
		$this->load->view('orders/deposit_confirmation_view', $data);
		
	}
	
	/**
	 * ID Page for this controller.
	 *
	 * Shows a specific store determined by its ID
	 */
	public function id()
	{

		if(!$this->uri->segment(3) OR !$this->uri->segment(4)){

			page_not_found();

		}else{
			//PERMISSIONS
			$uri_segment = array('order_id' => $this->uri->segment(3), 'store_id' => $this->uri->segment(4));
			checkForPermission($this->session->userdata('user_id'), $uri_segment, 'orders');
			//END OF PERMISSIONS

			$this->load->model('sell_model');
			
			$order_id = $this->uri->segment(3);
			$store_id = $this->uri->segment(4);
			$data['store'] = $this->sell_model->get_store($store_id);
			$data['order'] = $this->sell_model->get_order($order_id);
			$data['messages']= $this->sell_model->get_messages($order_id);

			$this->load->view('orders/id_view', $data);
		}

	}
	
	
	
	
	
	/**
	 * Store functions.
	 *
	 * Specific functions for stores
	 */
	public function store(){
	
		if(!$store_id = $this->uri->segment(3)){

			page_not_found();

		}else{

			$user_id = $this->session->userdata('user_id');

			//PERMISSIONS
			$uri_segment = array('store_id' => $store_id);
			checkForPermission($user_id , $uri_segment, 'stores');
			//END OF PERMISSIONS

			$this->load->model('sell_model');

			$data['stores'] = $this->sell_model->get_all_user_stores();
			$data['orders'] = array( 'incomplete' => $this->sell_model->get_store_orders($user_id, $store_id, $status = 'incomplete'), 
									 'new' => $this->sell_model->get_store_orders($user_id, $store_id, $status = 'new'), 
									 'waiting_for_payment' => $this->sell_model->get_store_orders($user_id, $store_id, $status = 'waiting_for_payment'), 
									 'sin_fondos' => $this->sell_model->get_store_orders($user_id, $store_id, $status = 'sin_fondos'), 
									 'pending' => $this->sell_model->get_store_orders($user_id, $store_id, $status = 'pending'), 
									 'delivered' => $this->sell_model->get_store_orders($user_id, $store_id, $status = 'delivered'),
									 'confirmed' => $this->sell_model->get_store_orders($user_id, $store_id, $status = 'confirmed'),
									 'closed' => $this->sell_model->get_store_orders($user_id, $store_id, $status = 'closed')  
									);
				
			$this->load->view('orders/index_view', $data);

		}
	
	}
	 
	public function cancel_order()
	{
		// Validate -> Process -> Store
		
		// Redirect
	}
	
	public function update_order()
	{
		// Validate -> Process -> Store
		
		// Redirect
	}
	
	public function addMessage()
	{

		$order_id = $this->input->post('order_id');
		$store_id = $this->input->post('store_id');
		$msg = $this->input->post('contact_text');

		if(!$msg){

			redirect('orders/id/'.$order_id.'/'.$store_id);

		}else{

			//PERMISSIONS
			$uri_segment = array('order_id' => $order_id, 'store_id' => $store_id);
			checkForPermission($this->session->userdata('user_id'), $uri_segment, 'orders');
			//END OF PERMISSIONS

			$this->load->model('sell_model');
			$this->sell_model->add_message($order_id, $store_id, $this->input->post('contact_text'), $group='sell'); //sell = store
			redirect('orders/id/'.$order_id.'/'.$store_id);

		}
		
	}
	
	public function program_delivery_pickup()
	{

		//PERMISSIONS--PENDING

		//END OF PERMISSIONS

		$hour_from = $this->input->post('hour_from');
		$hour_to =  $this->input->post('hour_to');
		$date = $this->input->post('date');
		$dateFrom = $date.' '.$hour_from.':00';
		$dateTo = $date.' '.$hour_to.':00';
		$now = time();


		$diff = strtotime($dateTo) - strtotime($dateFrom);
		$hrsDiff = floor($diff/60/60);
		
		if(!$date){
			//no date
			echo $this->lang->line('stores_orders_orderid_pickup_error_selectDay');
		
		}elseif(strtotime($dateFrom) > strtotime($dateTo)){
			// error
			echo $this->lang->line('stores_orders_orderid_pickup_error_incorrectRange');

		}elseif($hrsDiff<5){
			//another error
			echo $this->lang->line('stores_orders_orderid_pickup_error_5hoursRange');
			
		}else{

			$this->load->model('sell_model');
			
			$message = '';
			$order_info = $this->sell_model->get_order($this->input->post('order_id'));
			$store = $this->sell_model->get_info_store($order_info['partidas'][0]->store_id);

			if($order_info['info'][0]->currency == 'MXN'){

				$message = 'ok';
			
			}else{

				$customerId = $this->sell_model->getStripeCustomerId($order_info['info'][0]->buyer_id);
				$amount = $order_info['info'][0]->total_price * 100;

				switch($store->payment_processor){
					case 'stripe_production':
						$stripeKey = "vzknwLB5Vx0cknFSudS1ywwVV55cyDIA";
						break;
					case 'stripe_test':
						$stripeKey = "MPE9EXYYJ3qVP9EjihUdCi0fNFyAFV0t";
						break;
					default:
						$stripeKey = "MPE9EXYYJ3qVP9EjihUdCi0fNFyAFV0t";
				}

				// Cobro a la TC
				require_once(APPPATH.'libraries/Stripe.php');
				//Stripe::setApiKey("MPE9EXYYJ3qVP9EjihUdCi0fNFyAFV0t");
				Stripe::setApiKey($stripeKey);

				try {
					Stripe_Charge::create(array(
											     "amount" => $amount,
											     "currency" => "usd",
											     "customer" => $customerId,
											     "description" => "Charge order # ".$this->input->post('order_id')
											    )
										);
				    $message = 'ok';
				}
				  catch (Exception $e) {

				  	$code = $e->getTrace();

				}

			}


			//Para correo a customer
			$customerLang = $this->sell_model->get_user_info($order_info['info'][0]->buyer_email, $id = false);
			$sizesText = ($customerLang->usr_language =='es' ? 'Talla: ' : 'Sizes: ');
			$order_info_details = '';
			foreach($order_info['partidas'] as $value){
				$order_info_details .= '<p>'. $value->units.' | '.$value->name.' | '.$value->description. ($value->selected_size!='' ? ' | '.$sizesText.$value->selected_size : '') .'</p>';
			}
			$order_info_details .= '<p> Total $ '. $order_info['info'][0]->total_price.' '.$order_info['info'][0]->currency.'</p><br />';
			$vars_array = array('order_id' => $order_info['info'][0]->id,
								'units'  => $order_info['info'][0]->units,
								'order_details'  => $order_info_details,
								'shipment_type' => $this->lang->line('www_buy_payment_delivery_text_'.$order_info['info'][0]->shipment->type.'_'.$customerLang->usr_language),
								'store_name' => $store->name,
								'delivery_date' => $order_info['info'][0]->delivery_date, 
								);
			//End of para correo customer


			if($message == 'ok' AND $order_info['info'][0]->status!='confirmed'){ //Si paso stripe y es pago en efectivo (MXN) y si no tiene un status confirmed ya asignado
			
				$this->sell_model->update_order_status($this->input->post('order_id'), $status='confirmed', $dateFrom, $dateTo);

				//Mail para Alfonso
				$destinatario = $this->sell_model->get_destinatario($order_info['info'][0]->id);

				$alfonso_array = array( 'order_id' => $order_info['info'][0]->id,
										'units'  => $order_info['info'][0]->units,
										'shipment_type' => $this->lang->line('www_buy_payment_delivery_text_'.$order_info['info'][0]->shipment->type.'_es'),
										'order_details'  => $order_info_details,
										'store_name' => $store->name,
										'delivery_date' => $order_info['info'][0]->delivery_date, 
										'contacto_recoleccion' => $store->contacto_recoleccion,
										'direccion_recoleccion' => $store->direccion_recoleccion,
										'telefono_recoleccion' => $store->telefono_recoleccion,
										'mail_recoleccion' => $store->mail_recoleccion,
										'nombre_destinatario' => $destinatario->contact_name,
										'direccion_destinatario' => $destinatario->street_name.' '.$destinatario->city.' '.$destinatario->state.' '.$destinatario->zipcode.' '.$destinatario->country,
										'telefono_destinatario' => $destinatario->phone,
										'program_delivery_from' => $order_info['info'][0]->program_delivery_from,
										'program_delivery_to' => $order_info['info'][0]->program_delivery_to
										);

				kLog($user_id = $this->session->userdata('user_id'), 'SELL', $action = 'Usuario programo la orden No. '.$order_info['info'][0]->id.' para su recoleccion', $details = '');
				send_email('alomeli@kichink.com', $email_template_key='aviso_programacion_tienda', $lang = 'es', $alfonso_array, $type='K');
				$send_mail = send_email($order_info['info'][0]->buyer_email, $email_template_key='aviso_envio_usuario', $lang = $customerLang->usr_language, $vars_array, $type='C');
				
				if($send_mail){
					echo 'success';
				}else{
					echo 'Error: '.$this->lang->line('stores_orders_orderid_pickup_error_sendingMail');
				}

			}else{

				$codigoErrorStripe = $code[0]['args'][1];
				$msgErrorStripe = $code[0]['args'][2]['error']['message'];

				if($order_info['info'][0]->status!='confirmed'){

					if($codigoErrorStripe == 402){ //402 error credit card

						//Send email to customer
						$noticeError_array = array( 'order_id' => $order_info['info'][0]->id,
													'units'  => $order_info['info'][0]->units,
													'order_details'  => $order_info_details,
													'shipment_type' => $this->lang->line('www_buy_payment_delivery_text_'.$order_info['info'][0]->shipment->type.'_'.$customerLang->usr_language),
													'store_name' => $store->name,
													'delivery_date' => $order_info['info'][0]->delivery_date, 
													'error_card' => $msgErrorStripe,
													'url' => 'https://www.kichink.com/orders/id/'.$order_info['info'][0]->id.'/'.$store->id
												  );

						$this->sell_model->update_order_status_sin_fondos($this->input->post('order_id'));
						send_email($order_info['info'][0]->buyer_email, $email_template_key='aviso_actualizacion_tarjeta_pago', $lang = $customerLang->usr_language, $noticeError_array, $type='C');
					    send_email('lfernandez@nube9.mx', $email_template_key='aviso_actualizacion_tarjeta_pago', $lang = 'es', $noticeError_array, $type='C');
					    kLog($user_id = $this->session->userdata('user_id'), 'SELL', $action = 'Usuario ha intentado programar la orden No. '.$order_info['info'][0]->id.' pero genero error: '.$msgErrorStripe, $details = '');
						echo $codigoErrorStripe.': '.$msgErrorStripe.' <br/>Se ha enviado un correo al cliente para solicitar la actualizacion de su tarjeta bancaria.';

					}else{

						echo $codigoErrorStripe.': '.$msgErrorStripe.' <br/>Favor de verificar.';

					}

				}else{

					echo 'Esta orden ya ha sido confirmada por la tienda, favor de verificar';

				}


			}
			
		}
		
	}
	

}

/* End of file orders.php */
/* Location: ./application/controllers/orders.php */